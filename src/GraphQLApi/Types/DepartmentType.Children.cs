// GENERATED BY CodeGenerationUtility!!!

using System;
using GraphQL.DataLoader;

namespace GraphQLApi.Types
{
    /*
     * IMPORTANT - This class was originally generated by the CodeGenerationUtility.
     * It will not be overwritten - specific changes for each entity should be made here
     */
    public sealed partial class DepartmentType
    {
        public void ChildFields(QueryFactoryHelper queryFactoryHelper, IDataLoaderContextAccessor dataLoaderContextAccessor)
        {
            /*

            // child elements should use the DataLoader pattern https://graphql-dotnet.github.io/docs/guides/dataloader/

            // example - one-to-one relationship
            Field<RouteType, Route>()
                .Name("route")
                .Description("The course (route) associated with the student record.")
                .ResolveAsync(context =>
                {
                    Func<IEnumerable<string>, CancellationToken, Task<IDictionary<string, Route>>> batchLoaderLogic = async (routeIds, cancelToken) =>
                    {
                        var queryFactory = queryFactoryHelper.GetQueryFactory();

                        var query = queryFactory
                            .Query("Route")
                            .WhereIn("RouteId", routeIds);

                        var result = await query.GetAsync<Route>();
                        return result.ToDictionary(x => x.RouteId);
                    };

                    var dataLoader = dataLoaderContextAccessor.Context.GetOrAddBatchLoader("StudentRecords_Route", batchLoaderLogic);
                    return dataLoader.LoadAsync(context.Source.RouteId);
                });

            // example - one-to-many relationship
            Field<ListGraphType<CommunicationType>, IEnumerable<Communication>>()
                .Name("communications")
                .Description("The communication channels available for the person.")
                .ResolveAsync(context =>
                {
                    Func<IEnumerable<string>, CancellationToken, Task<ILookup<string, Communication>>> batchLoaderLogic = async (mmuIds, cancelToken) =>
                    {
                        var queryFactory = queryFactoryHelper.GetQueryFactory();

                        var query = queryFactory
                                    .Query("Communication")
                                    .WhereIn("ContactId", mmuIds);

                        var result = await query.GetAsync<Communication>();
                        return result.ToLookup(x => x.ContactId);
                    };

                    var dataLoader = dataLoaderContextAccessor.Context.GetOrAddCollectionBatchLoader("Person_Communication", batchLoaderLogic);
                    return dataLoader.LoadAsync(context.Source.MmuId);
                });

            */

        }
    }

}
